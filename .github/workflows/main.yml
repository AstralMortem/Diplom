name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'poetry'

      - name: Install Poetry
        run: pip install poetry

      - name: Install Python dependencies
        run: poetry install
        working-directory: ./backend

      - name: Build Python executable with PyInstaller
        run: |
          poetry run pip install pyinstaller
          poetry run pyinstaller ./backend/MedVoice-Server-CLI.spec
        working-directory: ./backend

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'yarn'

      - name: Install Rust toolchain (for Tauri)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Install Tauri system dependencies (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Install frontend dependencies with Yarn
        run: yarn install
        working-directory: ./gui

      - name: Build Tauri app
        run: yarn tauri build
        working-directory: ./gui

      - name: Prepare release artifacts
        run: |
          mkdir -p release/
          
          # Copy Python backend executable
          cp ../backend/dist/backend${{ runner.os == 'Windows' && '.exe' || '' }} release/
          
          # Determine the correct Tauri output path based on platform
          if [ "${{ matrix.platform }}" == "windows" ]; then
            cp -r target/release/bundle/msi/*.msi release/
          elif [ "${{ matrix.platform }}" == "macos" ]; then
            cp -r target/release/bundle/macos/*.app release/
            cp -r target/release/bundle/dmg/*.dmg release/
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            cp -r target/release/bundle/deb/*.deb release/
            cp -r target/release/bundle/appimage/*.AppImage release/
          fi
        shell: bash
        working-directory: ./gui

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-build
          path: ./gui/release/
          retention-days: 7

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
